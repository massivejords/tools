from adtools.finder import pull_AD
from adtools.seqlib import read_fastq
import pandas as pd

def count_AD_bc_pairs(file, design_to_use = None, subset = None, **kwargs):
    """Count occurences of each unique AD-barcode pair."""

    # design file needs an ArrayDNA column with designed DNA seqs
    designed_ADs_list = None
    if design_to_use != None:
        designed_ADs_list = list(pd.read_csv(design_to_use)["ArrayDNA"])

    links= []
    # if no design, count all unique AD barcode pairs
    if design_to_use == None:
        for line in read_fastq(file, subset):
            AD, barcode = pull_AD(line[1], **kwargs)
            if AD != None:
                links.append((AD, barcode))
    else: # count pairs only if AD matches to design file
        for line in read_fastq(file, subset):
            AD, barcode = pull_AD(line[1], **kwargs)
            if AD in designed_ADs_list:
                links.append((AD, barcode))

    df = pd.DataFrame(links, columns = ["AD", "barcode"])
    pair_counts = df.groupby(["AD", "barcode"]).size()
    pairs = pd.DataFrame(pair_counts).reset_index()
    pairs.columns = ['AD', 'barcode', "count"]
    return pair_counts

def count_ADs(file, design_to_use = None, subset = None, **kwargs):
    """Count occurences of each AD."""

    designed_ADs_list = None
    if design_to_use != None:
        designed_ADs_list = list(pd.read_csv(design_to_use)["ArrayDNA"])

    links= []
    # if no design, count all unique ADs
    if design_to_use == None:
        for line in read_fastq(file, subset):
            AD, _ = pull_AD(line[1], barcoded = False, **kwargs)
            if AD != None:
                links.append((AD))
    else: 
        for line in read_fastq(file, subset):
            AD, _ = pull_AD(line[1], barcoded = False, **kwargs)
            if AD in designed_ADs_list:
                links.append((AD))


    def process_old(self, barcoded = False, **kwargs):
        """Calculate the activity for each tile."""

        sort_list = []

        if barcoded == True:
            method = count_AD_bc_pairs
        else: method = count_ADs

        for sample in self.data_files:
            parsed_sample = method(sample, design_to_use = self.design_file, **kwargs)
            sort_list.append(parsed_sample)
        
        normed_sort, numreads = sort_normalizer(sort_list, self.bin_counts)

        processed_sort = calculate_activity(normed_sort, self.bin_values)

        return processed_sort, numreads