:py:mod:`labtools.adtools.sort`
===============================

.. py:module:: labtools.adtools.sort


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   labtools.adtools.sort.Sort




.. py:class:: Sort(data_files: list, bin_counts: list, bin_values: list, design_file: str = None, bc_dict: str = False)

   A sort object.

   .. attribute:: data_files

      List of str paths to fastq files in order of bins.

      :type: list

   .. attribute:: bin_counts

      List of number of cells per bin in order of data files.

      :type: list

   .. attribute:: bin_values

      List of mean or median fluorescence values per bin in order of data files.

      :type: list

   .. attribute:: design_file

      Path to design csv file containing "ArrayDNA" header with DNA sequences to search

      :type: str or None

   .. attribute:: bc_dict

      Path to bc_dict csv file (see seqlib.write_bc_dict)

      :type: str or False, default False

   .. py:method:: process(csv=False, **kwargs)

      Calculate the activity for each tile.

      :param csv: Use a csv input for predetermined AD counts (for example, bowtie output).
      :type csv: bool, default False
      :param \*\*kwargs: Extra arguments to pull_AD (for example changing the anchor sequences).
      :type \*\*kwargs: dict, optional

      :returns: * **processed_sort** (*pandas.DataFrame*)
                * *numreads*
                * *reads*

      .. rubric:: Examples

      >>>Sort.process()


   .. py:method:: downsample(subset_size: int) -> pandas.DataFrame

      Perform downsampling on raw reads, then error compared to using all reads.

      :param subset_size: Size in # of reads to subset each file by.
      :type subset_size: int

      :returns: **errors**
      :rtype: pandas.DataFrame

      .. rubric:: Examples

      >>>Sort.downsample(100000)



